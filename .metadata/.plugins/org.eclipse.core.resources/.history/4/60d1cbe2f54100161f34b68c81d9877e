package com.crucifix.software.generate;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.samskivert.mustache.Mustache;
import com.samskivert.mustache.Template;

public class Generator {

	private static final String[] templateValue = new String[] { "clickOn", "sayPlay", "audio", "storage" };

	private static final String VALUES_TEMPLATE = "<resources><string name=\"app_name\">Tooonage</string><string name=\"permission_explanation_record_audio\">{{audio}}</string><string name=\"permission_explanation_read_external_storage\">{{storage}}</string><string name=\"click_on_one\">1). {{clickOn}}</string><string name=\"click_on_two\">2). {{clickOn}}</string><string name=\"say_play\">3). {{sayPlay}}</string></resources>";
	private static final Template mustacheTemplate = Mustache.compiler().defaultValue("DEFAULT").compile(VALUES_TEMPLATE);

	private static final ObjectMapper mapper = new ObjectMapper();
	private static final ObjectReader reader = mapper.readerFor(TranslationJson[].class);

	private static final Map<String, List<TranslationJson>> translationMap = new LinkedHashMap<>();
	private static final Map<String, Object> templateData = new LinkedHashMap<>();

	public void init(final String... jsonFiles) throws JsonProcessingException, IOException {

		translationMap.clear();

		for (final String jsonFile : jsonFiles) {
			final TranslationJson[] translations = reader.readValue(new File(jsonFile));
			translationMap.put(jsonFile, Arrays.asList(translations));
		}
	}

	public void build() throws IOException {
		
		int localIndex = 0;
		templateData.clear();

		for (Map.Entry<String, List<TranslationJson>> entry : translationMap.entrySet()) {
			
			
			
			
			
			
		}

	}

}
